name: Create Release on Version Change

on:
  push:
    branches:
      - master  # Remplacez par votre branche principale si nécessaire

jobs:
   sea-action:
    name: Build SEA
    strategy:
      matrix:
        os: [ubuntu-latest , windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      id: checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      id: setup-node
      uses: actions/setup-node@v4
      with:
        node-version: "22"
        cache: npm

    - name: Find Node
      id: find-node
      run:
        echo "node=$(node -e 'console.log(process.argv[0]);')" >>
        $env:GITHUB_OUTPUT
        
    - run:
       npx esbuild --bundle ./lib/index.js --outfile=bundle.js --platform=node 

    - name: SEA
      id: sea
      uses: bryopsida/node-sea-action@v1
      with:
        working-dir: .
        output-dir: build
        executable-name: nvs
        sea-config-path: sea-config.json
        node-path: ${{ steps.find-node.outputs.node }}

    - uses: actions/upload-artifact@v4
      with:
        name: nvs-${{ matrix.os }}
        path: build/
        if-no-files-found: error
   release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '22'  # Utilisez la version de Node.js que vous préférez

    - name: Get previous and current version
      id: versions
      run: |
        echo "PREVIOUS_VERSION=$(git show HEAD~1:package.json | jq -r '.version')" >> $GITHUB_ENV
        echo "CURRENT_VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV

    - name: Check if version has changed
      id: check
      run: |
        if [ "$PREVIOUS_VERSION" != "$CURRENT_VERSION" ]; then
          echo "Version has changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          echo "changed=true" >> $GITHUB_ENV
        else
          echo "Version has not changed"
          echo "changed=false" >> $GITHUB_ENV
        fi

    - name: Create Release
      if: env.changed == 'true'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.CURRENT_VERSION }}
        release_name: Release v${{ env.CURRENT_VERSION }}
        body: |
          Changes in this release:
          - Description of changes
        draft: false
        prerelease: false
